#!/usr/bin/env python3
"""
Find Test Messages

Look for our specific test messages that were generated by Campaign Brain.
"""

import sqlite3
from pathlib import Path

def find_test_messages():
    """Find our test messages in the database"""
    print("üîç Looking for Test Messages from Campaign Brain")
    print("=" * 60)
    
    # Database path
    outreach_dir = Path(__file__).parent.parent / "4runr-outreach-system"
    queue_db = outreach_dir / "campaign_system" / "campaigns.db"
    
    if not queue_db.exists():
        print(f"‚ùå Database not found: {queue_db}")
        return
        
    try:
        conn = sqlite3.connect(str(queue_db))
        cursor = conn.cursor()
        
        # Look for campaigns with our test lead IDs
        test_lead_ids = ['test_batch_001', 'test_batch_002', 'test_batch_003']
        
        print("üîç Searching for test campaigns...")
        for lead_id in test_lead_ids:
            cursor.execute("SELECT * FROM campaigns WHERE lead_id = ?", (lead_id,))
            campaigns = cursor.fetchall()
            
            if campaigns:
                cursor.execute("PRAGMA table_info(campaigns);")
                columns = [col[1] for col in cursor.fetchall()]
                
                for campaign in campaigns:
                    campaign_dict = dict(zip(columns, campaign))
                    print(f"\n‚úÖ Found campaign for {lead_id}:")
                    print(f"   Campaign ID: {campaign_dict.get('campaign_id', 'N/A')}")
                    print(f"   Status: {campaign_dict.get('campaign_status', 'N/A')}")
                    print(f"   Email: {campaign_dict.get('lead_email', 'N/A')}")
                    print(f"   Created: {campaign_dict.get('created_at', 'N/A')}")
                    
                    # Look for messages in this campaign
                    campaign_id = campaign_dict.get('campaign_id')
                    if campaign_id:
                        cursor.execute("SELECT * FROM message_queue WHERE campaign_id = ?", (campaign_id,))
                        messages = cursor.fetchall()
                        
                        if messages:
                            cursor.execute("PRAGMA table_info(message_queue);")
                            msg_columns = [col[1] for col in cursor.fetchall()]
                            
                            print(f"   üìß Messages in queue: {len(messages)}")
                            for msg in messages:
                                msg_dict = dict(zip(msg_columns, msg))
                                print(f"      Queue ID: {msg_dict.get('queue_id', 'N/A')}")
                                print(f"      Status: {msg_dict.get('status', 'N/A')}")
                                print(f"      Scheduled: {msg_dict.get('scheduled_for', 'N/A')}")
                                print(f"      Subject: {msg_dict.get('subject', 'N/A')[:50]}...")
                        else:
                            print(f"   ‚ö†Ô∏è No messages found in queue for this campaign")
            else:
                print(f"‚ùå No campaign found for {lead_id}")
        
        # Also search by email address in message_queue (since campaigns table doesn't have lead_email)
        print(f"\nüîç Searching by email address (kyanberg@outlook.com)...")
        cursor.execute("SELECT * FROM message_queue WHERE lead_email = ? ORDER BY created_at DESC LIMIT 5", ('kyanberg@outlook.com',))
        email_messages = cursor.fetchall()
        
        if email_messages:
            cursor.execute("PRAGMA table_info(message_queue);")
            msg_columns = [col[1] for col in cursor.fetchall()]
            
            print(f"‚úÖ Found {len(email_messages)} messages for kyanberg@outlook.com:")
            for msg in email_messages:
                msg_dict = dict(zip(msg_columns, msg))
                print(f"   Queue ID: {msg_dict.get('queue_id', 'N/A')}")
                print(f"   Campaign: {msg_dict.get('campaign_id', 'N/A')}")
                print(f"   Status: {msg_dict.get('status', 'N/A')}")
                print(f"   Scheduled: {msg_dict.get('scheduled_for', 'N/A')}")
                print(f"   Subject: {msg_dict.get('subject', 'N/A')}")
                print("-" * 30)
                
                # Get campaign details for this message
                campaign_id = msg_dict.get('campaign_id')
                if campaign_id:
                    cursor.execute("SELECT * FROM campaigns WHERE campaign_id = ?", (campaign_id,))
                    campaign_rows = cursor.fetchall()
                    if campaign_rows:
                        cursor.execute("PRAGMA table_info(campaigns);")
                        camp_columns = [col[1] for col in cursor.fetchall()]
                        campaign_dict = dict(zip(camp_columns, campaign_rows[0]))
                        print(f"   üìã Campaign Lead ID: {campaign_dict.get('lead_id', 'N/A')}")
                        print(f"   üìã Campaign Status: {campaign_dict.get('campaign_status', 'N/A')}")
                        print("-" * 30)
        else:
            print("‚ùå No messages found for kyanberg@outlook.com")
        
        # Remove the old email_campaigns code
        email_campaigns = []
        

        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error searching database: {str(e)}")

if __name__ == "__main__":
    find_test_messages()