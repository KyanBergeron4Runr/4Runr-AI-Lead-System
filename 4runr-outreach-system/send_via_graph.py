#!/usr/bin/env python3
"""
Send test message using Microsoft Graph API instead of SMTP.
This is better for Microsoft 365/Outlook accounts.
"""

import sys
import json
import requests
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, str(Path(__file__).parent))

def get_access_token(client_id, client_secret, tenant_id):
    """Get access token from Microsoft Graph."""
    url = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"
    
    data = {
        'client_id': client_id,
        'client_secret': client_secret,
        'scope': 'https://graph.microsoft.com/.default',
        'grant_type': 'client_credentials'
    }
    
    response = requests.post(url, data=data)
    
    if response.status_code == 200:
        return response.json()['access_token']
    else:
        raise Exception(f"Failed to get access token: {response.text}")

def send_email_via_graph(access_token, sender_email, recipient_email, subject, message_content):
    """Send email using Microsoft Graph API."""
    url = f"https://graph.microsoft.com/v1.0/users/{sender_email}/sendMail"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    email_data = {
        "message": {
            "subject": subject,
            "body": {
                "contentType": "Text",
                "content": message_content
            },
            "toRecipients": [
                {
                    "emailAddress": {
                        "address": recipient_email
                    }
                }
            ]
        }
    }
    
    response = requests.post(url, headers=headers, json=email_data)
    
    if response.status_code == 202:
        return True
    else:
        raise Exception(f"Failed to send email: {response.status_code} - {response.text}")

def send_test_message_graph():
    """Send the test message using Microsoft Graph API."""
    print("📧 Sending Test Message via Microsoft Graph API")
    print("=" * 60)
    
    try:
        # Load configuration
        sys.path.append('4runr-outreach-system')
        from shared.config import config
        
        # Get Microsoft Graph configuration
        graph_config = {
            'client_id': config.get('MS_GRAPH_CLIENT_ID'),
            'client_secret': config.get('MS_GRAPH_CLIENT_SECRET'),
            'tenant_id': config.get('MS_GRAPH_TENANT_ID'),
            'sender_email': config.get('MS_GRAPH_SENDER_EMAIL')
        }
        
        print(f"✅ Client ID: {graph_config['client_id']}")
        print(f"✅ Tenant ID: {graph_config['tenant_id']}")
        print(f"✅ Sender Email: {graph_config['sender_email']}")
        print(f"✅ Client Secret: {'*' * len(graph_config['client_secret']) if graph_config['client_secret'] else 'NOT SET'}")
        
        # Check if all required settings are present
        missing_settings = [k for k, v in graph_config.items() if not v]
        if missing_settings:
            print(f"❌ Missing Microsoft Graph settings: {missing_settings}")
            return False
        
        # The personalized message we generated
        message_content = """Hi Kyan,

I've been following 4Runr's work in AI-powered business automation and I'm impressed by your approach to helping companies streamline their operations through intelligent solutions.

As a founder in the AI automation space, you're likely focused on scaling your lead generation systems and optimizing client acquisition processes. Your expertise in custom automation systems and strategic AI consulting puts you at the forefront of this rapidly evolving industry.

I'd love to explore how we might collaborate or share insights about emerging trends in AI-driven business automation. Would you be open to a brief conversation about your current priorities and the challenges you're seeing in the market?

Best regards,
4Runr Team

---
This message was generated by the 4Runr Autonomous Outreach System
Website analyzed: https://4runrtech.com/
Generated on: 2025-07-29
Method: Microsoft Graph API"""
        
        subject = "🤖 Test: AI-Generated Outreach Message - 4Runr Partnership"
        recipient = "kyanberg@outlook.com"
        
        print(f"\n📝 Message Preview:")
        print(f"From: {graph_config['sender_email']}")
        print(f"To: {recipient}")
        print(f"Subject: {subject}")
        print("-" * 60)
        print(message_content[:200] + "..." if len(message_content) > 200 else message_content)
        print("-" * 60)
        
        # Get access token
        print(f"\n🔑 Getting access token...")
        access_token = get_access_token(
            graph_config['client_id'],
            graph_config['client_secret'],
            graph_config['tenant_id']
        )
        print("✅ Access token obtained")
        
        # Send email
        print(f"\n🚀 Sending email via Microsoft Graph...")
        success = send_email_via_graph(
            access_token,
            graph_config['sender_email'],
            recipient,
            subject,
            message_content
        )
        
        if success:
            print("✅ Message sent successfully!")
            print(f"\n🎉 SUCCESS!")
            print(f"The AI-generated message has been sent to kyanberg@outlook.com")
            print(f"Check your inbox for the personalized outreach message!")
            return True
        
    except Exception as e:
        print(f"❌ Failed to send message: {str(e)}")
        
        # Common error troubleshooting
        if "unauthorized" in str(e).lower() or "401" in str(e):
            print("\n🔧 Troubleshooting:")
            print("  • Check that the Microsoft Graph app has Mail.Send permissions")
            print("  • Verify the client secret hasn't expired")
            print("  • Ensure the app is properly registered in Azure AD")
        elif "forbidden" in str(e).lower() or "403" in str(e):
            print("\n🔧 Troubleshooting:")
            print("  • The app may not have permission to send as this user")
            print("  • Check Application permissions in Azure AD")
            print("  • Verify Mail.Send permission is granted and admin consented")
        
        return False

def main():
    """Main function."""
    success = send_test_message_graph()
    return success

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)